// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scribble.proto

package scribble

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ImageSpec struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Fontsize             int32    `protobuf:"varint,2,opt,name=fontsize,proto3" json:"fontsize,omitempty"`
	Imgsize              int32    `protobuf:"varint,3,opt,name=imgsize,proto3" json:"imgsize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageSpec) Reset()         { *m = ImageSpec{} }
func (m *ImageSpec) String() string { return proto.CompactTextString(m) }
func (*ImageSpec) ProtoMessage()    {}
func (*ImageSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd8f2842d02980d9, []int{0}
}

func (m *ImageSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageSpec.Unmarshal(m, b)
}
func (m *ImageSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageSpec.Marshal(b, m, deterministic)
}
func (m *ImageSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageSpec.Merge(m, src)
}
func (m *ImageSpec) XXX_Size() int {
	return xxx_messageInfo_ImageSpec.Size(m)
}
func (m *ImageSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ImageSpec proto.InternalMessageInfo

func (m *ImageSpec) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *ImageSpec) GetFontsize() int32 {
	if m != nil {
		return m.Fontsize
	}
	return 0
}

func (m *ImageSpec) GetImgsize() int32 {
	if m != nil {
		return m.Imgsize
	}
	return 0
}

type Image struct {
	Image                []byte   `protobuf:"bytes,1,opt,name=Image,proto3" json:"Image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd8f2842d02980d9, []int{1}
}

func (m *Image) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Image.Unmarshal(m, b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Image.Marshal(b, m, deterministic)
}
func (m *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(m, src)
}
func (m *Image) XXX_Size() int {
	return xxx_messageInfo_Image.Size(m)
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func init() {
	proto.RegisterType((*ImageSpec)(nil), "scribble.ImageSpec")
	proto.RegisterType((*Image)(nil), "scribble.Image")
}

func init() { proto.RegisterFile("scribble.proto", fileDescriptor_bd8f2842d02980d9) }

var fileDescriptor_bd8f2842d02980d9 = []byte{
	// 164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x4e, 0x2e, 0xca,
	0x4c, 0x4a, 0xca, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0x42,
	0xb9, 0x38, 0x3d, 0x73, 0x13, 0xd3, 0x53, 0x83, 0x0b, 0x52, 0x93, 0x85, 0x84, 0xb8, 0x58, 0x4a,
	0x52, 0x2b, 0x4a, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x21, 0x29, 0x2e, 0x8e,
	0xb4, 0xfc, 0xbc, 0x92, 0xe2, 0xcc, 0xaa, 0x54, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0x38,
	0x5f, 0x48, 0x82, 0x8b, 0x3d, 0x33, 0x37, 0x1d, 0x2c, 0xc5, 0x0c, 0x96, 0x82, 0x71, 0x95, 0x64,
	0xb9, 0x58, 0xc1, 0xc6, 0x0a, 0x89, 0x40, 0x19, 0x60, 0x33, 0x79, 0x82, 0x20, 0x1c, 0x23, 0x07,
	0x2e, 0xee, 0x90, 0xd4, 0x8a, 0x92, 0x90, 0x7c, 0x88, 0x22, 0x43, 0x2e, 0xf6, 0xe4, 0xfc, 0xbc,
	0xb2, 0xd4, 0xa2, 0x12, 0x21, 0x61, 0x3d, 0xb8, 0x53, 0xe1, 0xee, 0x92, 0xe2, 0x47, 0x13, 0x54,
	0x62, 0x48, 0x62, 0x03, 0x7b, 0xc4, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x92, 0xa4, 0x25, 0x9a,
	0xda, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TextToImageClient is the client API for TextToImage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TextToImageClient interface {
	Convert(ctx context.Context, in *ImageSpec, opts ...grpc.CallOption) (*Image, error)
}

type textToImageClient struct {
	cc *grpc.ClientConn
}

func NewTextToImageClient(cc *grpc.ClientConn) TextToImageClient {
	return &textToImageClient{cc}
}

func (c *textToImageClient) Convert(ctx context.Context, in *ImageSpec, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/scribble.TextToImage/convert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextToImageServer is the server API for TextToImage service.
type TextToImageServer interface {
	Convert(context.Context, *ImageSpec) (*Image, error)
}

// UnimplementedTextToImageServer can be embedded to have forward compatible implementations.
type UnimplementedTextToImageServer struct {
}

func (*UnimplementedTextToImageServer) Convert(ctx context.Context, req *ImageSpec) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Convert not implemented")
}

func RegisterTextToImageServer(s *grpc.Server, srv TextToImageServer) {
	s.RegisterService(&_TextToImage_serviceDesc, srv)
}

func _TextToImage_Convert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextToImageServer).Convert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scribble.TextToImage/Convert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextToImageServer).Convert(ctx, req.(*ImageSpec))
	}
	return interceptor(ctx, in, info, handler)
}

var _TextToImage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scribble.TextToImage",
	HandlerType: (*TextToImageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "convert",
			Handler:    _TextToImage_Convert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scribble.proto",
}
